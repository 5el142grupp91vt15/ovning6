Övning 6: Bibliotek
Linux som utvecklingsmiljö, VT15
Anders Axelsson, 1986-04-08-6234
2015-03-29

Del 1
Jag implementerade biblioteket component (libcomponent.c). Biblioteket 
innehåller en funktion e_resistance och dess syfte är att beräkna 
ersättningsresistansen som kan erhållas med seriekopplade resistanser 
ur E12-serien. Funktionen tar två argument: sökt resistans och en 
array. Funktionen returnerar antalet resistanselement som krävs för 
att erhålla ersättningsresistansen genom return och exakt vilka 
resistanselement som föreslås genom arrayen som skickats som argument.

Biblioteket component används genom att inkludera libcomponent.h i 
filen som biblioteket ska användas i och placera libcomponent.so i en 
sökväg som finns i $PATH. Därefter behöver man allokera utrymme för en 
array med tre element, sen är det bara att anropa funktionen 
e_resistance.

Testprogrammet componenttest.c testar component genom att anropa 
funktionen e_resistance med olika värden och skriver ut skillnaden 
mellan originalresistansen och ersättningsresistansen, vilka E12 
element som använts samt hur många dessa är. Värdena på 
originalresistanserna är valda efter värden inom E12-serien som 
funktionen ska klara av att hitta en erästtningsresistans av utan något 
fel och värden utanför som funktionen inte väntas klara av.

Testprogrammet kompilerade jag genom att använda följande kommando:
    gcc -Wall -o componenttest componenttest.c -lcomponent
Förklaring av växlar som används:
    -Wall: sätter på alla varningar i gcc.
    -o: namn på binär som gcc kompilerar.
    -l: anger vilka bibiolek som ska användas i länkningen.

Algoritmen som funktionen e_resistance använder för att finna 
ersättningsresistansen utgår från en fullständig uppräkning av alla 
kombinationer som kan göras med värdena från E12-serien. För varje 
kombination beräknas det absoluta fel som erhålls vid jämförelse med 
målresistansen. Om felet från den aktuella kombinationen är mindre än 
det hittills lägsta felet uppdateras variabeln med det lägsta felet 
hittills funnet. Dessutom sparas den resistanskombination som 
producerade felvärdet genom tre indexsiffror från E12-serien. Om 
felvärde 0 erhålls då avbryts sökandet och funktionen returnerar.












Del 2
I make-filen har vi skapat mål med samma namn som .o-filerna som
biblioteken skapar vid kompilering. Dessa mål har respektive biblioteks 
.c- och .h-fil i listan som förutsättningar. 
Receptet som körs för dessa mål är följande: 
    gcc -c -fPIC <biblioteksnamn>.c
Förklaring av växlar som används:
    -c: kompilerar bara, länkar inte.
    -fPIC: gör biblioteket oberoende av absoluta minnesplatser.

För varje bibliotek har vi även skapat varsitt mål med samma namn som 
.so-filerna, (biblioteken skapar när .o-filerna länkas till delade 
bibliotek). Dessa mål har respektive biblioteks .o-fil som förutsättning.
Receptet som körs för dessa mål är följande: 
    gcc -shared -fPIC -o <biblioteksnamn>.so <biblioteksnamn>.o
Förklaring av växlar som används:
    -shared: skapar ett länkbart objekt.
    -fPIC: gör biblioteket oberoende av absoluta minnesplatser.
    -o: anger namn på biblioteksfilen.

Huvudprogrammet kompileras till en .o-fil i ett eget mål med main.c som 
förutsättning:
    gcc -c main.c 
Förklaring av växlar som används:
    -c: kompilerar bara, länkar inte.

Tre ytterligare mål knyter ihop kompileringen och länkningen 
av huvudprogram och bibliotek. Målet 'lib' har inget recept (dummy) men 
anropar .so-målen för bibioteken om .so-filerna har förändrats.
Målet 'all' har 'lib' och main.o som förutsättningar och 
receptet kopierar bibliotekens .so-filer till mappen lib i den aktuella
katalogen och länkar huvudprogrammet 'electrotest' till de lokala
biliotekfilerna:
    gcc -Wl,-rpath=./lib -o electrotest main.o 
        -lresistance -lpower -lcomponent
Förklaring av växlar som används:
    -Wl,: anger vad som ska skickas vidare till länkaren.
    -rpath: argument till länkaren, anger var länkaren ska leta efter 
            biblioteken. 
    -o: anger namn på programmet.
    -l: anger vilka bibiolek som ska användas i länkningen.

Målet 'install' har målet 'lib' och main.o som förutsättningar och 
receptet kopierar bibliotekens .so-filer till /usr/lib och länkar 
huvudprogrammet 'electrotest' till biblioteksfilerna i /usr/lib,
samt kopierar huvudprogrammet till /usr/bin: 
    gcc -o electrotest main.o -lresistance -lpower -lcomponent
Förklaring av växlar som används:
    -o: anger namn på programmet.
    -l: anger vilka bibiolek som ska användas i länkningen.

I huvudprogrammet (main.c) inkluderar vi 
header-filerna för varje bibliotek med varsitt inkluderingsdirektiv. 
Funktionerna i respektive bibliotek används i huvudprogrammet genom att 
anropa korrekt funktionssignatur.

Jag sammarbetade med Tobias Lindberg och Ludvig Klingspor.

Del 3
Sammarbetet har gått bra, vi använde facebook för att prata med 
varandra och git för versionshantering. Vi testade varandras kod och 
hittade några problem som vi diskuterade och löste. I ett betydligt 
större projekt behövs också dessa delar, men mer strikta regler för 
vad man får pusha till repot tror jag. Kanske behövs enhetstester 
köras lokalt innan, kanske behövs någon form av kodstilskontroll typ 
checkstyle, kanske behövs kodgranskning typ gerrit. För att garantera 
att koden inte är felaktig kanske man behöver regresionstestning typ 
jenkins som körs kontinuerligt. Det behövs nog också dedikerade
byggservrar för att inte det ska ta för många minuter att bygga,
om kodmassan är stor. 


